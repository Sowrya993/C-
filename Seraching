Seraching: is the process of finding a specific element within a data structure, such as an array, list, or database.

//linera search : Linear search is a straightforward searching algorithm that checks each element in a list sequentially until the target element is found or all elements are checked. Itâ€™s best suited for unsorted or small datasets, where efficiency is less critical.
//Time Complexity: O(n),Space Complexity: O(1)
#include <bits/stdc++.h>
using namespace std;
int linearsearch(int arr[], int size, int target);
int main(){
	int arr1[5] = {1, 2, 3, 4, 5};
    int size = sizeof(arr1) / sizeof(arr1[0]);
    int target = 5;
    int result=linearsearch(arr1,size,target);
    if(result!=-1){
    	cout<<"target found at index "<<result<<endl;
	}
	else{
		cout<<"target not found";
	}
}
int linearsearch(int arr[],int size,int target){
	for(int i=0;i<size;i++){
		if(arr[i]==target){
			return i;
		}
	}
	return -1;  // Return -1 if target is not found
}



//binary search : Binary search is a more efficient searching algorithm that works only on sorted datasets. It divides the list in half repeatedly, eliminating half the elements each time, until the target element is found.
//Time Complexity: O(logn),Space Complexity: O(1)
#include <bits/stdc++.h>
using namespace std;
int binarysearch(int arr[], int size, int target);

int main(){
    int arr1[5] = {1, 2, 3, 4, 5};
    int size = sizeof(arr1) / sizeof(arr1[0]);
    int target = 5;
    int result=binarysearch(arr1,size,target);
    if(result!=-1){
    	cout<<"target found at index "<<result<<endl;
	}
	else{
		cout<<"target not found";
	}
}

int binarysearch(int arr[], int size, int target){
    int low = 0;
    int high = size - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == target) {
            return mid;
        } else if (arr[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return -1; 
}

