//Arrays : it is a datastructure where we can store multiple values of similar datatype

#include<bits/stdc++.h>
using namespace std;
int main(){
	int arr[5]={1,2,3,4,5}; //static array
	int n=sizeof(arr)/sizeof(arr[0]); //calculating size of an array
	for(int i=0;i<n;i++){
		cout<<arr[i];
	}
}

#include<bits/stdc++.h>
using namespace std;
int main(){
	int n;
	cin>>n;
	int arr[n]; //dynamic array
	for(int i=0;i<n;i++){ //input array elements
		cin>>arr[i];
	}
	for(int i=0;i<n;i++){ //traversing an array
		cout<<arr[i];
	}
}
Application: Used to store a sequence of data elements, such as signal samples in digital signal processing (DSP) or channel data in network packets.


//calculating sum of all elements in an array
#include<bits/stdc++.h>
using namespace std;
int main(){
	int n;
	cin>>n;
	int arr[n]; 
	for(int i=0;i<n;i++){ 
		cin>>arr[i];
	}
int sum=0;
for(int i=0;i<n;i++){
	sum=sum+arr[i];
}
cout<<sum;
}
Application: In DSP, summing samples over a period helps in calculating metrics like signal power and noise level.

//finding element x in an array
#include<bits/stdc++.h>
using namespace std;
int main(){
	int n;
	cin>>n;
	int arr[n]; 
	for(int i=0;i<n;i++){ 
		cin>>arr[i];
	}
	int x; //element to be serached
	cin>>x;
	bool find=false;
	int i;
	for( i=0;i<n;i++){
		if(arr[i]==x){
			find=true;
			break;
		}
	}
	if(find==true){
		cout<<"element found at index"<<i<<endl;
	}
	else{
		cout<<"element not found";
	}
}
Application: Used in routing tables and lookup tables to search for IP addresses or network nodes.

//find the largest element
#include<bits/stdc++.h>
using namespace std;
int main(){
	int n;
	cin>>n;
	int arr[n]; 
	for(int i=0;i<n;i++){ 
		cin>>arr[i];
	}
	int max=arr[0];
	for(int i=1;i<n;i++){
		if(arr[i]>max){
			max=arr[i];
		}
	}
	cout<<max;
}
//Note: exchange max with min and use condition if(arr[i]<min) to find min element in an array
Application: Helps in selecting the strongest signal or determining the highest bandwidth available from a set of options.

//find second largest
#include<bits/stdc++.h>
using namespace std;
int main(){
	int n;
	cin>>n;
	int arr[n]; 
	for(int i=0;i<n;i++){ 
		cin>>arr[i];
	}
	int max=INT_MIN;
	int secondmax=INT_MIN;
	for(int i=0;i<n;i++){
		if(arr[i]>max){
			secondmax=max;
			max=arr[i];
		}
		else if(arr[i]>secondmax && arr[i]!=max){
			secondmax=arr[i];
		}
	}
	cout<<secondmax;
}

//count number of elements in a given array greater than a number x
#include<bits/stdc++.h>
using namespace std;
int main(){
	int n;
	cin>>n;
	int arr[n]; 
	for(int i=0;i<n;i++){ 
		cin>>arr[i];
	}
	int x;
	cin>>x;
	int count=0;
	for(int i=0;i<n;i++){
		if(arr[i]>x){
			count+=1;
		}
	}
	cout<<count;
}
Application: Used in threshold-based filtering to identify channels with signal strength above a certain threshold.

//findind duplicates
#include <bits/stdc++.h>
using namespace std;
int main() {
    int n;
    cin >> n;
    int arr[n];
    for (int i = 0; i < n; i++) { 
        cin >> arr[i];
    }
    bool duplicates = false;
    set<int> duplicateValues; // to store duplicate values
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] == arr[j]) {
                duplicates = true;
                duplicateValues.insert(arr[i]); // store the duplicate value
            }
        }
    }
    if (duplicates) {
        cout << "Duplicate elements found: ";
        for (int val : duplicateValues) {
            cout << val << " ";
        }
        cout << endl;
    } else {
        cout << "No duplicate elements found." << endl;
    }
}
Application: In telecommunications, detecting duplicate packets helps in identifying retransmissions and optimizing data flows.


//copy contents of one array to another array in reverse order
#include <bits/stdc++.h>
using namespace std;
int main() {
    int n;
    cin >> n;
    int arr[n];
    int arr1[n];
    for (int i = 0; i < n; i++) { 
        cin >> arr[i];
    }
    for(int i=0;i<n;i++){
    	arr1[i]=arr[n-1-i];
	}
	for(int i=0;i<n;i++){
		cout<<arr[i]<<" ";
	}
	cout<<endl;
		for(int i=0;i<n;i++){
		cout<<arr1[i]<<" ";
	}
}

//reverse without using extra array
#include <bits/stdc++.h>
using namespace std;
int main() {
    int n;
    cin >> n;
    int arr[n];
    for (int i = 0; i < n; i++) { 
        cin >> arr[i];
    }
    int i = 0, j = n - 1;
    while (i < j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        i++;
        j--;
}
    for (int i = 0; i < n; i++) { 
        cout << arr[i] << " ";
    }
    cout << endl;
}
Application: Reversing data sequences is useful in certain encoding or decoding processes in signal processing.

//rotate a given array by k steps
#include <bits/stdc++.h>
using namespace std;
void reverse(int arr[],int i,int j){
	while (i < j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        i++;
        j--;
}
}
int main() {
    int n;
    cin >> n;
    int arr[n];
    for (int i = 0; i < n; i++) { 
        cin >> arr[i];
    }
    int k;
    cin>>k;
    reverse(arr,0,n-k-1);
    reverse(arr,n-k,n-1);
    reverse(arr,0,n-1);
    for (int i = 0; i < n; i++) { 
        cout << arr[i];
    }
}
Used in circular buffering, which is a common technique in telecommunications for managing data streams.

//sorting of an array
#include <bits/stdc++.h>
using namespace std;
int main(){
	int arr[5]={45,23,11,78,32};
	int size=sizeof(arr)/sizeof(arr[0]);
	for(int i=0;i<size;i++){
		for(int j=i+1;j<size;j++){
			if(arr[i]>arr[j]){
				int temp=arr[i];
				arr[i]=arr[j];
				arr[j]=temp;
			}
		}
	}
	 for (int i = 0; i < size; i++) { 
        cout<< arr[i]<<" ";
    }
	
}
Application: Sorting helps in organizing data for efficient retrieval, such as sorting frequencies in channel allocation.

//max eleemnt till index i
#include <bits/stdc++.h>
using namespace std;
int main(){
	int arr[5]={45,23,11,78,32};
	int size=sizeof(arr)/sizeof(arr[0]);
	int max1=arr[0];
	for(int i=0;i<size;i++){
		max1=max(max1,arr[i]);
		cout<<"max element till the index "<<i<<" "<<max1<<endl;
		
	}
}

//common eleemnt in three sorted arrays
#include <bits/stdc++.h>
using namespace std;
void findCommonElements(int arr1[], int arr2[], int arr3[], int n1, int n2, int n3) {
    int i = 0, j = 0, k = 0;
    while (i < n1 && j < n2 && k < n3) {
        if (arr1[i] == arr2[j] && arr2[j] == arr3[k]) {
            cout << arr1[i] << " ";
            i++; j++; k++;
        } else if (arr1[i] < arr2[j])
            i++;
        else if (arr2[j] < arr3[k])
            j++;
        else
            k++;
    }
}
int main() {
    int arr1[] = {1, 5, 10, 20, 40, 80};
    int arr2[] = {6, 7, 20, 80, 100};
    int arr3[] = {3, 4, 15, 20, 30, 70, 80, 120};
    int n1 = sizeof(arr1) / sizeof(arr1[0]);
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
    int n3 = sizeof(arr3) / sizeof(arr3[0]);
    cout << "Common elements are: ";
    findCommonElements(arr1, arr2, arr3, n1, n2, n3);
    return 0;
}
Application: Used in identifying common frequency bands or channels across different network operators or devices.

//Sort an Array of 0s, 1s, and 2s (Dutch National Flag Problem)
#include <bits/stdc++.h>
using namespace std;
void sort(int arr[], int n) {
    int low = 0, mid = 0, high = n - 1;
    while (mid <= high) {
        if (arr[mid] == 0){
            swap(arr[low], arr[mid]);
            low++;
            mid++;
        }
        else if (arr[mid] == 1){
            mid++;
        }
        else{
            swap(arr[mid], arr[high]);
            high--;
        }
    }
}
int main() {
    int arr[] = {0, 1, 2, 1, 0, 2, 1};
    int n = sizeof(arr) / sizeof(arr[0]);
    sort(arr, n);
    for (int i = 0; i < n; i++) cout << arr[i] << " ";
    return 0;
}
Application: In modulation schemes, sorting and grouping signal types is essential for signal encoding and decoding.


//move zeros to end
#include <bits/stdc++.h>
using namespace std;
void movezeros(int arr[], int n) {
	int low=0;
	int high=n-1;
	while(low<=high){
		if(arr[low]==0){
			swap(arr[low],arr[high]);
			high--;
		}
		else{
			low++;
		}
	}
}
int main() {
    int arr[] = {0, 1, 2, 1, 0, 2, 1};
    int n = sizeof(arr) / sizeof(arr[0]);
    movezeros(arr, n);
    for (int i = 0; i < n; i++) cout << arr[i] << " ";
    return 0;
}
Application: Removing inactive channels (represented as 0s) from an active list for efficient bandwidth management.

//union and intersection
#include <bits/stdc++.h>
using namespace std;
void findUnionAndIntersection(int arr1[], int arr2[], int n1, int n2) {
    int i = 0, j = 0;
    cout << "Union: ";
    while (i < n1 && j < n2) {
        if (arr1[i] < arr2[j]) {
            cout << arr1[i] << " ";
            i++;
        } else if (arr1[i] > arr2[j]) {
            cout << arr2[j] << " ";
            j++;
        } else {
            cout << arr1[i] << " ";
            i++;
            j++;
        }
    }
    // If there are any remaining elements in arr1 or arr2
    while (i < n1) {
        cout << arr1[i] << " ";
        i++;
    }
    while (j < n2) {
        cout << arr2[j] << " ";
        j++;
    }
    cout << endl;
    // Now, finding intersection
    i = 0, j = 0;
    cout << "Intersection: ";
    while (i < n1 && j < n2) {
        if (arr1[i] < arr2[j]) {
            i++;
        } else if (arr1[i] > arr2[j]) {
            j++;
        } else {
            cout << arr1[i] << " ";
            i++;
            j++;
        }
    }
    cout << endl;
}
int main() {
    int arr1[] = {1, 2, 4, 5, 6};
    int arr2[] = {2, 3, 5, 7};
    int n1 = sizeof(arr1) / sizeof(arr1[0]);
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
    
    findUnionAndIntersection(arr1, arr2, n1, n2);
    return 0;
}
Application: Union and intersection are useful in set operations for frequency and spectrum allocation, especially in managing multiple carriers.

//missing number in a given range of elements
#include <bits/stdc++.h>
using namespace std;
int findMissingNumber(int arr[], int n) {
    int total_sum = n * (n + 1) / 2;
    int array_sum = 0;
    for (int i = 0; i < n - 1; i++) {
        array_sum += arr[i];
    }
    return total_sum - array_sum;
}
int main() {
    int arr[] = {1, 2, 4, 5, 6};  // The missing number is 3
    int n = sizeof(arr) / sizeof(arr[0])+1; // n includes missing number
    cout << "Missing number is: " << findMissingNumber(arr, n) << endl;
    return 0;
}
Application: Missing values detection is essential for error correction in data transmission, such as in error-detecting codes.

//printing all subarrays
#include <bits/stdc++.h>
using namespace std;
int main(){
	int arr[5]={1,2,3,4,5};
	int n=sizeof(arr) / sizeof(arr[0]);
	for(int st=0;st<n;st++){
		for(int end=st;end<n;end++){
			for(int i=st;i<=end;i++){
				cout<<arr[i];
			}
			cout<<" ";
		}
		cout<<endl;
	}
}

//maximum subarray sum-kadens algorithm
#include <bits/stdc++.h>
using namespace std;
int main(){
	int arr[5]={1,2,3,4,5};
	int n=sizeof(arr) / sizeof(arr[0]);
	int currsum=0,maxsum=INT_MIN;
	for(int i=0;i<n;i++){
		currsum+=arr[i];
		maxsum=max(currsum,maxsum);
		if(currsum<0){
			currsum=0;
		}
	}
	cout<<maxsum;
}
	
//finding subarray with given sum
#include <iostream>
#include <vector>
using namespace std;
int main() {
    int arr[6] = {1, 4, 20, 3, 10, 5}; 
    int targetSum = 33;
    int n = sizeof(arr)/sizeof(arr[0]);
    int left = 0, currentSum = 0;
    bool found = false;
    for (int right = 0; right < n; ++right) {
        currentSum += arr[right];
        while (currentSum > targetSum && left <= right) {
            currentSum -= arr[left];
            left++;
        }
        if (currentSum == targetSum) {
            cout << "Subarray with the given sum found between indices " << left << " and " << right << endl;
            found = true;
            break;
        }
    }
    if (!found) {
        cout << "No subarray with the target sum found." << endl;
    }
}









    
	


