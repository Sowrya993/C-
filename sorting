Sorting is the process of arranging data in a particular order, typically in ascending or descending order.

//bubble sort : Bubble Sort is a simple comparison-based sorting algorithm where adjacent elements are repeatedly swapped if they are in the wrong order. 
#include <bits/stdc++.h>
using namespace std;

void bubblesort(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}
int main() {
    int arr[5] = {2, 1, 5, 4, 3};
    int size = sizeof(arr) / sizeof(arr[0]);
    bubblesort(arr, size);
    cout << "Sorted array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    
    return 0;
}
Applications in Telecommunications:
Signal processing: Sorting is used to arrange signals in order of strength or priority in network traffic management or signal routing.
Packet scheduling: Bubble Sort can be used in situations where simple data reordering is necessary in small-scale or low-priority systems.
Time Complexity: Best: O(n), Worst: O(n²), Average: O(n²)



//selection sort : Selection Sort is another comparison-based sorting algorithm. It works by dividing the array into two parts: the sorted part and the unsorted part. It repeatedly selects the smallest (or largest) element from the unsorted part and swaps it with the first unsorted element.
#include <iostream>
using namespace std;
void selectionSort(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {
        // Find the minimum element in the unsorted portion of the array
        int minIndex = i;
        for (int j = i + 1; j < size; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        // Swap the found minimum element with the first element of the unsorted portion
        swap(arr[i], arr[minIndex]);
    }
}
int main() {
    int arr[] = {29, 10, 14, 37, 13};
    int size = sizeof(arr) / sizeof(arr[0]);
    selectionSort(arr, size);
    cout << "Sorted array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    return 0;
}
Applications in Telecommunications:
Routing Table Updates: Selection Sort can be used to organize routing tables in networks where the goal is to select the best route based on the cost or distance.
Channel allocation: In frequency division multiplexing (FDM), selection sort can help in organizing available channels based on parameters such as signal quality or load.
Time Complexity: Best: O(n²), Worst: O(n²), Average: O(n²)




//insertion sort : Insertion Sort is an efficient sorting algorithm for small datasets. It works by building the sorted array one element at a time. It takes each element from the input and places it in its correct position among the already sorted elements.
#include <iostream>
using namespace std;

void insertionSort(int arr[], int size) {
    for (int i = 1; i < size; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
}
int main() {
    int arr[] = {12, 11, 13, 5, 6};
    int size = sizeof(arr) / sizeof(arr[0]);
    insertionSort(arr, size);
    cout << "Sorted array: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    return 0;
}
Applications in Telecommunications:
Priority Queueing: In scenarios such as scheduling packet transmission or managing call queues, insertion sort can be used to dynamically insert packets or calls in the correct order based on their priority or time of arrival.
Adaptive Systems: In systems like adaptive equalization or adaptive filtering, where incoming data needs to be sorted based on priority or timestamp.
Time Complexity: Best: O(n), Worst: O(n²), Average: O(n²)




//merge sort : Merge Sort is a divide-and-conquer sorting algorithm that divides the array into two halves, recursively sorts them, and then merges them back together in sorted order.
#include <iostream>
using namespace std;

void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;  // Size of the left subarray
    int n2 = right - mid;     // Size of the right subarray
    int L[n1], R[n2];  // Temporary arrays for left and right halves
    // Copy data to temporary arrays L[] and R[]
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    int i = 0;    // Initial index of the left subarray
    int j = 0;    // Initial index of the right subarray
    int k = left; // Initial index of the merged subarray

    // Merge the temporary arrays back into arr[left...right]
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    // Copy remaining elements of L[], if any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    // Copy remaining elements of R[], if any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2; // Find the middle point

        // Recursively sort the first and second halves
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        // Merge the sorted halves
        merge(arr, left, mid, right);
    }
}
int main() {
    int arr[] = {12, 11, 13, 5, 6, 7};
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    cout << "Given array is: ";
    for (int i = 0; i < arr_size; i++)
        cout << arr[i] << " ";
    cout << endl;

    mergeSort(arr, 0, arr_size - 1);

    cout << "Sorted array is: ";
    for (int i = 0; i < arr_size; i++)
        cout << arr[i] << " ";
    cout << endl;

    return 0;
}
//Note : mergesort funtion Recursively splits the array into two halves until each half contains only one element and Calls the merge function to combine the sorted halves back into a single sorted array.
//merge function merges two halves of the array (L and R) back into the main array arr.
Applications in Telecommunications:
Packet Sorting and Reordering: In protocols like TCP, merge sort can be used to reorder packets that may arrive out of order, especially when handling large datasets.
Load Balancing: Merge Sort can be used in network load balancing, where traffic is divided and merged based on resource availability or load.
Time Complexity: Best: O(n log n), Worst: O(n log n), Average: O(n log n)




//quick sort : Quick Sort is an efficient divide-and-conquer sorting algorithm. It works by selecting a pivot element, partitioning the array into two subarrays around the pivot, and then recursively sorting the subarrays.
#include <iostream>
using namespace std;
// Partition function to place pivot element in the correct position
int partition(int arr[], int low, int high) {
    int pivot = arr[high]; // Choose the rightmost element as pivot
    int i = (low - 1);     // Index of the smaller element
    for (int j = low; j <= high - 1; j++) {
        if (arr[j] < pivot) { // If current element is smaller than pivot
            i++;              // Increment index of the smaller element
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]); // Place pivot in the correct position
    return (i + 1);              // Return the partitioning index
}

// QuickSort function
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high); // pi is partitioning index
        // Recursively sort elements before and after partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
int main() {
    int arr[] = {10, 7, 8, 9, 1, 5};
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "Given array is: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
    quickSort(arr, 0, n - 1);
    cout << "Sorted array is: ";
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
    return 0;
}
Applications in Telecommunications:
Data Routing and Traffic Management: Quick Sort can be used in routing algorithms where efficient sorting of routing tables based on metrics like delay, bandwidth, or hops is needed.
Error Correction: In certain error detection and correction algorithms, Quick Sort can be used for sorting data blocks or packets to ensure that errors are efficiently corrected in high-speed communication networks.
Time Complexity:  Best: O(n log n), Worst: O(n²), Average: O(n log n)


